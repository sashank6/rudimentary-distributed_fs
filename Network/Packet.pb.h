// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef PROTOBUF_Packet_2eproto__INCLUDED
#define PROTOBUF_Packet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Packet_2eproto();
void protobuf_AssignDesc_Packet_2eproto();
void protobuf_ShutdownFile_Packet_2eproto();

class SystemInformation;
class Packet;
class FileData;
class FileRequest;
class Callback;
class Ack;

// ===================================================================

class SystemInformation : public ::google::protobuf::Message {
 public:
  SystemInformation();
  virtual ~SystemInformation();

  SystemInformation(const SystemInformation& from);

  inline SystemInformation& operator=(const SystemInformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemInformation& default_instance();

  void Swap(SystemInformation* other);

  // implements Message ----------------------------------------------

  SystemInformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemInformation& from);
  void MergeFrom(const SystemInformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 port = 1;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required int32 disksize = 2;
  inline bool has_disksize() const;
  inline void clear_disksize();
  static const int kDisksizeFieldNumber = 2;
  inline ::google::protobuf::int32 disksize() const;
  inline void set_disksize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SystemInformation)
 private:
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_disksize();
  inline void clear_has_disksize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 disksize_;
  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static SystemInformation* default_instance_;
};
// -------------------------------------------------------------------

class Packet : public ::google::protobuf::Message {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  void Swap(Packet* other);

  // implements Message ----------------------------------------------

  Packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FLAG = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFLAGFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional .SystemInformation sysinfo = 2;
  inline bool has_sysinfo() const;
  inline void clear_sysinfo();
  static const int kSysinfoFieldNumber = 2;
  inline const ::SystemInformation& sysinfo() const;
  inline ::SystemInformation* mutable_sysinfo();
  inline ::SystemInformation* release_sysinfo();
  inline void set_allocated_sysinfo(::SystemInformation* sysinfo);

  // optional .FileData fileData = 3;
  inline bool has_filedata() const;
  inline void clear_filedata();
  static const int kFileDataFieldNumber = 3;
  inline const ::FileData& filedata() const;
  inline ::FileData* mutable_filedata();
  inline ::FileData* release_filedata();
  inline void set_allocated_filedata(::FileData* filedata);

  // optional .Callback callback = 4;
  inline bool has_callback() const;
  inline void clear_callback();
  static const int kCallbackFieldNumber = 4;
  inline const ::Callback& callback() const;
  inline ::Callback* mutable_callback();
  inline ::Callback* release_callback();
  inline void set_allocated_callback(::Callback* callback);

  // optional .FileRequest filerequest = 5;
  inline bool has_filerequest() const;
  inline void clear_filerequest();
  static const int kFilerequestFieldNumber = 5;
  inline const ::FileRequest& filerequest() const;
  inline ::FileRequest* mutable_filerequest();
  inline ::FileRequest* release_filerequest();
  inline void set_allocated_filerequest(::FileRequest* filerequest);

  // optional .Ack ack = 6;
  inline bool has_ack() const;
  inline void clear_ack();
  static const int kAckFieldNumber = 6;
  inline const ::Ack& ack() const;
  inline ::Ack* mutable_ack();
  inline ::Ack* release_ack();
  inline void set_allocated_ack(::Ack* ack);

  // @@protoc_insertion_point(class_scope:Packet)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_sysinfo();
  inline void clear_has_sysinfo();
  inline void set_has_filedata();
  inline void clear_has_filedata();
  inline void set_has_callback();
  inline void clear_has_callback();
  inline void set_has_filerequest();
  inline void clear_has_filerequest();
  inline void set_has_ack();
  inline void clear_has_ack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SystemInformation* sysinfo_;
  ::FileData* filedata_;
  ::Callback* callback_;
  ::FileRequest* filerequest_;
  ::Ack* ack_;
  ::google::protobuf::int32 flag_;
  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static Packet* default_instance_;
};
// -------------------------------------------------------------------

class FileData : public ::google::protobuf::Message {
 public:
  FileData();
  virtual ~FileData();

  FileData(const FileData& from);

  inline FileData& operator=(const FileData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileData& default_instance();

  void Swap(FileData* other);

  // implements Message ----------------------------------------------

  FileData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileData& from);
  void MergeFrom(const FileData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 block = 3;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 3;
  inline ::google::protobuf::int32 block() const;
  inline void set_block(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FileData)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_block();
  inline void clear_has_block();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* filename_;
  ::std::string* data_;
  ::google::protobuf::int32 block_;
  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static FileData* default_instance_;
};
// -------------------------------------------------------------------

class FileRequest : public ::google::protobuf::Message {
 public:
  FileRequest();
  virtual ~FileRequest();

  FileRequest(const FileRequest& from);

  inline FileRequest& operator=(const FileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileRequest& default_instance();

  void Swap(FileRequest* other);

  // implements Message ----------------------------------------------

  FileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileRequest& from);
  void MergeFrom(const FileRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:FileRequest)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* filename_;
  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static FileRequest* default_instance_;
};
// -------------------------------------------------------------------

class Callback : public ::google::protobuf::Message {
 public:
  Callback();
  virtual ~Callback();

  Callback(const Callback& from);

  inline Callback& operator=(const Callback& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Callback& default_instance();

  void Swap(Callback* other);

  // implements Message ----------------------------------------------

  Callback* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Callback& from);
  void MergeFrom(const Callback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // required int32 op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // optional int32 filesize = 3;
  inline bool has_filesize() const;
  inline void clear_filesize();
  static const int kFilesizeFieldNumber = 3;
  inline ::google::protobuf::int32 filesize() const;
  inline void set_filesize(::google::protobuf::int32 value);

  // optional int32 block = 4;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 4;
  inline ::google::protobuf::int32 block() const;
  inline void set_block(::google::protobuf::int32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Callback)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_filesize();
  inline void clear_has_filesize();
  inline void set_has_block();
  inline void clear_has_block();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool success_;
  ::google::protobuf::int32 op_;
  ::google::protobuf::int32 filesize_;
  ::google::protobuf::int32 block_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static Callback* default_instance_;
};
// -------------------------------------------------------------------

class Ack : public ::google::protobuf::Message {
 public:
  Ack();
  virtual ~Ack();

  Ack(const Ack& from);

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ack& default_instance();

  void Swap(Ack* other);

  // implements Message ----------------------------------------------

  Ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline bool status() const;
  inline void set_status(bool value);

  // @@protoc_insertion_point(class_scope:Ack)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool status_;
  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static Ack* default_instance_;
};
// ===================================================================


// ===================================================================

// SystemInformation

// required int32 port = 1;
inline bool SystemInformation::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemInformation::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemInformation::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemInformation::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 SystemInformation::port() const {
  // @@protoc_insertion_point(field_get:SystemInformation.port)
  return port_;
}
inline void SystemInformation::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SystemInformation.port)
}

// required int32 disksize = 2;
inline bool SystemInformation::has_disksize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemInformation::set_has_disksize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemInformation::clear_has_disksize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemInformation::clear_disksize() {
  disksize_ = 0;
  clear_has_disksize();
}
inline ::google::protobuf::int32 SystemInformation::disksize() const {
  // @@protoc_insertion_point(field_get:SystemInformation.disksize)
  return disksize_;
}
inline void SystemInformation::set_disksize(::google::protobuf::int32 value) {
  set_has_disksize();
  disksize_ = value;
  // @@protoc_insertion_point(field_set:SystemInformation.disksize)
}

// -------------------------------------------------------------------

// Packet

// required int32 FLAG = 1;
inline bool Packet::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 Packet::flag() const {
  // @@protoc_insertion_point(field_get:Packet.FLAG)
  return flag_;
}
inline void Packet::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:Packet.FLAG)
}

// optional .SystemInformation sysinfo = 2;
inline bool Packet::has_sysinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::set_has_sysinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet::clear_has_sysinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet::clear_sysinfo() {
  if (sysinfo_ != NULL) sysinfo_->::SystemInformation::Clear();
  clear_has_sysinfo();
}
inline const ::SystemInformation& Packet::sysinfo() const {
  // @@protoc_insertion_point(field_get:Packet.sysinfo)
  return sysinfo_ != NULL ? *sysinfo_ : *default_instance_->sysinfo_;
}
inline ::SystemInformation* Packet::mutable_sysinfo() {
  set_has_sysinfo();
  if (sysinfo_ == NULL) sysinfo_ = new ::SystemInformation;
  // @@protoc_insertion_point(field_mutable:Packet.sysinfo)
  return sysinfo_;
}
inline ::SystemInformation* Packet::release_sysinfo() {
  clear_has_sysinfo();
  ::SystemInformation* temp = sysinfo_;
  sysinfo_ = NULL;
  return temp;
}
inline void Packet::set_allocated_sysinfo(::SystemInformation* sysinfo) {
  delete sysinfo_;
  sysinfo_ = sysinfo;
  if (sysinfo) {
    set_has_sysinfo();
  } else {
    clear_has_sysinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.sysinfo)
}

// optional .FileData fileData = 3;
inline bool Packet::has_filedata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet::set_has_filedata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet::clear_has_filedata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet::clear_filedata() {
  if (filedata_ != NULL) filedata_->::FileData::Clear();
  clear_has_filedata();
}
inline const ::FileData& Packet::filedata() const {
  // @@protoc_insertion_point(field_get:Packet.fileData)
  return filedata_ != NULL ? *filedata_ : *default_instance_->filedata_;
}
inline ::FileData* Packet::mutable_filedata() {
  set_has_filedata();
  if (filedata_ == NULL) filedata_ = new ::FileData;
  // @@protoc_insertion_point(field_mutable:Packet.fileData)
  return filedata_;
}
inline ::FileData* Packet::release_filedata() {
  clear_has_filedata();
  ::FileData* temp = filedata_;
  filedata_ = NULL;
  return temp;
}
inline void Packet::set_allocated_filedata(::FileData* filedata) {
  delete filedata_;
  filedata_ = filedata;
  if (filedata) {
    set_has_filedata();
  } else {
    clear_has_filedata();
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.fileData)
}

// optional .Callback callback = 4;
inline bool Packet::has_callback() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Packet::set_has_callback() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Packet::clear_has_callback() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Packet::clear_callback() {
  if (callback_ != NULL) callback_->::Callback::Clear();
  clear_has_callback();
}
inline const ::Callback& Packet::callback() const {
  // @@protoc_insertion_point(field_get:Packet.callback)
  return callback_ != NULL ? *callback_ : *default_instance_->callback_;
}
inline ::Callback* Packet::mutable_callback() {
  set_has_callback();
  if (callback_ == NULL) callback_ = new ::Callback;
  // @@protoc_insertion_point(field_mutable:Packet.callback)
  return callback_;
}
inline ::Callback* Packet::release_callback() {
  clear_has_callback();
  ::Callback* temp = callback_;
  callback_ = NULL;
  return temp;
}
inline void Packet::set_allocated_callback(::Callback* callback) {
  delete callback_;
  callback_ = callback;
  if (callback) {
    set_has_callback();
  } else {
    clear_has_callback();
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.callback)
}

// optional .FileRequest filerequest = 5;
inline bool Packet::has_filerequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Packet::set_has_filerequest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Packet::clear_has_filerequest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Packet::clear_filerequest() {
  if (filerequest_ != NULL) filerequest_->::FileRequest::Clear();
  clear_has_filerequest();
}
inline const ::FileRequest& Packet::filerequest() const {
  // @@protoc_insertion_point(field_get:Packet.filerequest)
  return filerequest_ != NULL ? *filerequest_ : *default_instance_->filerequest_;
}
inline ::FileRequest* Packet::mutable_filerequest() {
  set_has_filerequest();
  if (filerequest_ == NULL) filerequest_ = new ::FileRequest;
  // @@protoc_insertion_point(field_mutable:Packet.filerequest)
  return filerequest_;
}
inline ::FileRequest* Packet::release_filerequest() {
  clear_has_filerequest();
  ::FileRequest* temp = filerequest_;
  filerequest_ = NULL;
  return temp;
}
inline void Packet::set_allocated_filerequest(::FileRequest* filerequest) {
  delete filerequest_;
  filerequest_ = filerequest;
  if (filerequest) {
    set_has_filerequest();
  } else {
    clear_has_filerequest();
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.filerequest)
}

// optional .Ack ack = 6;
inline bool Packet::has_ack() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Packet::set_has_ack() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Packet::clear_has_ack() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Packet::clear_ack() {
  if (ack_ != NULL) ack_->::Ack::Clear();
  clear_has_ack();
}
inline const ::Ack& Packet::ack() const {
  // @@protoc_insertion_point(field_get:Packet.ack)
  return ack_ != NULL ? *ack_ : *default_instance_->ack_;
}
inline ::Ack* Packet::mutable_ack() {
  set_has_ack();
  if (ack_ == NULL) ack_ = new ::Ack;
  // @@protoc_insertion_point(field_mutable:Packet.ack)
  return ack_;
}
inline ::Ack* Packet::release_ack() {
  clear_has_ack();
  ::Ack* temp = ack_;
  ack_ = NULL;
  return temp;
}
inline void Packet::set_allocated_ack(::Ack* ack) {
  delete ack_;
  ack_ = ack;
  if (ack) {
    set_has_ack();
  } else {
    clear_has_ack();
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.ack)
}

// -------------------------------------------------------------------

// FileData

// required string filename = 1;
inline bool FileData::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileData::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileData::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileData::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& FileData::filename() const {
  // @@protoc_insertion_point(field_get:FileData.filename)
  return *filename_;
}
inline void FileData::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:FileData.filename)
}
inline void FileData::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:FileData.filename)
}
inline void FileData::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FileData.filename)
}
inline ::std::string* FileData::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FileData.filename)
  return filename_;
}
inline ::std::string* FileData::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileData::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FileData.filename)
}

// required string data = 2;
inline bool FileData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileData::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& FileData::data() const {
  // @@protoc_insertion_point(field_get:FileData.data)
  return *data_;
}
inline void FileData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:FileData.data)
}
inline void FileData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:FileData.data)
}
inline void FileData::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FileData.data)
}
inline ::std::string* FileData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FileData.data)
  return data_;
}
inline ::std::string* FileData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileData::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FileData.data)
}

// optional int32 block = 3;
inline bool FileData::has_block() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileData::set_has_block() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileData::clear_has_block() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileData::clear_block() {
  block_ = 0;
  clear_has_block();
}
inline ::google::protobuf::int32 FileData::block() const {
  // @@protoc_insertion_point(field_get:FileData.block)
  return block_;
}
inline void FileData::set_block(::google::protobuf::int32 value) {
  set_has_block();
  block_ = value;
  // @@protoc_insertion_point(field_set:FileData.block)
}

// -------------------------------------------------------------------

// FileRequest

// required string filename = 1;
inline bool FileRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileRequest::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& FileRequest::filename() const {
  // @@protoc_insertion_point(field_get:FileRequest.filename)
  return *filename_;
}
inline void FileRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:FileRequest.filename)
}
inline void FileRequest::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:FileRequest.filename)
}
inline void FileRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FileRequest.filename)
}
inline ::std::string* FileRequest::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FileRequest.filename)
  return filename_;
}
inline ::std::string* FileRequest::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileRequest::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FileRequest.filename)
}

// -------------------------------------------------------------------

// Callback

// required bool success = 1;
inline bool Callback::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Callback::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Callback::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Callback::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool Callback::success() const {
  // @@protoc_insertion_point(field_get:Callback.success)
  return success_;
}
inline void Callback::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Callback.success)
}

// required int32 op = 2;
inline bool Callback::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Callback::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Callback::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Callback::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Callback::op() const {
  // @@protoc_insertion_point(field_get:Callback.op)
  return op_;
}
inline void Callback::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:Callback.op)
}

// optional int32 filesize = 3;
inline bool Callback::has_filesize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Callback::set_has_filesize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Callback::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Callback::clear_filesize() {
  filesize_ = 0;
  clear_has_filesize();
}
inline ::google::protobuf::int32 Callback::filesize() const {
  // @@protoc_insertion_point(field_get:Callback.filesize)
  return filesize_;
}
inline void Callback::set_filesize(::google::protobuf::int32 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:Callback.filesize)
}

// optional int32 block = 4;
inline bool Callback::has_block() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Callback::set_has_block() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Callback::clear_has_block() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Callback::clear_block() {
  block_ = 0;
  clear_has_block();
}
inline ::google::protobuf::int32 Callback::block() const {
  // @@protoc_insertion_point(field_get:Callback.block)
  return block_;
}
inline void Callback::set_block(::google::protobuf::int32 value) {
  set_has_block();
  block_ = value;
  // @@protoc_insertion_point(field_set:Callback.block)
}

// optional bytes data = 5;
inline bool Callback::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Callback::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Callback::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Callback::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Callback::data() const {
  // @@protoc_insertion_point(field_get:Callback.data)
  return *data_;
}
inline void Callback::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Callback.data)
}
inline void Callback::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Callback.data)
}
inline void Callback::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Callback.data)
}
inline ::std::string* Callback::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Callback.data)
  return data_;
}
inline ::std::string* Callback::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Callback::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Callback.data)
}

// -------------------------------------------------------------------

// Ack

// required bool status = 1;
inline bool Ack::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ack::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ack::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ack::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool Ack::status() const {
  // @@protoc_insertion_point(field_get:Ack.status)
  return status_;
}
inline void Ack::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Ack.status)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Packet_2eproto__INCLUDED
